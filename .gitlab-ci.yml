stages:
  - build
  - verify
  - publish
  - deploy

include:
  - local: 'Documentation/.gitlab-ci.yml'
  - local: 'Backend/.gitlab-ci.yml'
  - local: 'Frontend/.gitlab-ci.yml'

# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

publish:
  # Use the official docker image.
  image: docker:20
  stage: publish
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  # The OST GitLab is subject to the Dockerhub rate limit, so we only build an image after the merge
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.deploy_template: &deploy_configuration
  image: alpine:3
  script:
    - chmod 400 $ID_ED25519
    - apk update && apk add openssh-client
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "docker pull $CI_REGISTRY_IMAGE:latest"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "docker tag $CI_REGISTRY_IMAGE:latest $CI_PROJECT_NAME:$CI_ENVIRONMENT_SLUG"
    - ssh -i $ID_ED25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "docker-compose up -d $CI_ENVIRONMENT_SLUG"
    - echo "Deployed at $CI_ENVIRONMENT_URL"
  only:
    variables:
      - $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

deploy_staging:
  <<: *deploy_configuration
  stage: deploy
  environment: staging

deploy_prod:
  <<: *deploy_configuration
  stage: deploy
  environment: prod
  when: manual

qodana-jvm:
  image:
    name: jetbrains/qodana-jvm:2022.1-eap
    entrypoint: ['']
  stage: verify
  script:
    - /opt/idea/bin/entrypoint --results-dir=$CI_PROJECT_DIR/qodana --save-report --report-dir=$CI_PROJECT_DIR/qodana/report
  artifacts:
    when: always
    paths:
       - qodana/report/
    expose_as: 'Qodana JVM Report'
