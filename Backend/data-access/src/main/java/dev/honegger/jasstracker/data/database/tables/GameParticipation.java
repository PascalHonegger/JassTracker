/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables;


import dev.honegger.jasstracker.data.database.Keys;
import dev.honegger.jasstracker.data.database.Public;
import dev.honegger.jasstracker.data.database.tables.Game.GamePath;
import dev.honegger.jasstracker.data.database.tables.Player.PlayerPath;
import dev.honegger.jasstracker.data.database.tables.Round.RoundPath;
import dev.honegger.jasstracker.data.database.tables.records.GameParticipationRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class GameParticipation extends TableImpl<GameParticipationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.game_participation</code>
     */
    public static final GameParticipation GAME_PARTICIPATION = new GameParticipation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameParticipationRecord> getRecordType() {
        return GameParticipationRecord.class;
    }

    /**
     * The column <code>public.game_participation.game_id</code>.
     */
    public final TableField<GameParticipationRecord, UUID> GAME_ID = createField(DSL.name("game_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.game_participation.player_id</code>.
     */
    public final TableField<GameParticipationRecord, UUID> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.game_participation.table_position</code>.
     */
    public final TableField<GameParticipationRecord, Integer> TABLE_POSITION = createField(DSL.name("table_position"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.game_participation.player_name</code>.
     */
    public final TableField<GameParticipationRecord, String> PLAYER_NAME = createField(DSL.name("player_name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    private GameParticipation(Name alias, Table<GameParticipationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private GameParticipation(Name alias, Table<GameParticipationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.game_participation</code> table reference
     */
    public GameParticipation(String alias) {
        this(DSL.name(alias), GAME_PARTICIPATION);
    }

    /**
     * Create an aliased <code>public.game_participation</code> table reference
     */
    public GameParticipation(Name alias) {
        this(alias, GAME_PARTICIPATION);
    }

    /**
     * Create a <code>public.game_participation</code> table reference
     */
    public GameParticipation() {
        this(DSL.name("game_participation"), null);
    }

    public <O extends Record> GameParticipation(Table<O> path, ForeignKey<O, GameParticipationRecord> childPath, InverseForeignKey<O, GameParticipationRecord> parentPath) {
        super(path, childPath, parentPath, GAME_PARTICIPATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class GameParticipationPath extends GameParticipation implements Path<GameParticipationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> GameParticipationPath(Table<O> path, ForeignKey<O, GameParticipationRecord> childPath, InverseForeignKey<O, GameParticipationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private GameParticipationPath(Name alias, Table<GameParticipationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public GameParticipationPath as(String alias) {
            return new GameParticipationPath(DSL.name(alias), this);
        }

        @Override
        public GameParticipationPath as(Name alias) {
            return new GameParticipationPath(alias, this);
        }

        @Override
        public GameParticipationPath as(Table<?> alias) {
            return new GameParticipationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<GameParticipationRecord> getPrimaryKey() {
        return Keys.GAME_PARTICIPATION_PKEY;
    }

    @Override
    public List<UniqueKey<GameParticipationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.GAME_PARTICIPATION_GAME_ID_TABLE_POSITION_KEY);
    }

    @Override
    public List<ForeignKey<GameParticipationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAME_PARTICIPATION__GAME_PARTICIPATION_GAME_ID_FKEY, Keys.GAME_PARTICIPATION__GAME_PARTICIPATION_PLAYER_ID_FKEY);
    }

    private transient GamePath _game;

    /**
     * Get the implicit join path to the <code>public.game</code> table.
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, Keys.GAME_PARTICIPATION__GAME_PARTICIPATION_GAME_ID_FKEY, null);

        return _game;
    }

    private transient PlayerPath _player;

    /**
     * Get the implicit join path to the <code>public.player</code> table.
     */
    public PlayerPath player() {
        if (_player == null)
            _player = new PlayerPath(this, Keys.GAME_PARTICIPATION__GAME_PARTICIPATION_PLAYER_ID_FKEY, null);

        return _player;
    }

    private transient RoundPath _round;

    /**
     * Get the implicit to-many join path to the <code>public.round</code> table
     */
    public RoundPath round() {
        if (_round == null)
            _round = new RoundPath(this, null, Keys.ROUND__ROUND_GAME_ID_PLAYER_ID_FKEY.getInverseKey());

        return _round;
    }

    @Override
    public List<Check<GameParticipationRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("game_participation_table_position_check"), "(((table_position >= 0) AND (table_position <= 3)))", true)
        );
    }

    @Override
    public GameParticipation as(String alias) {
        return new GameParticipation(DSL.name(alias), this);
    }

    @Override
    public GameParticipation as(Name alias) {
        return new GameParticipation(alias, this);
    }

    @Override
    public GameParticipation as(Table<?> alias) {
        return new GameParticipation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public GameParticipation rename(String name) {
        return new GameParticipation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameParticipation rename(Name name) {
        return new GameParticipation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public GameParticipation rename(Table<?> name) {
        return new GameParticipation(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation where(Condition condition) {
        return new GameParticipation(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameParticipation where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameParticipation where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameParticipation where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public GameParticipation where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public GameParticipation whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
