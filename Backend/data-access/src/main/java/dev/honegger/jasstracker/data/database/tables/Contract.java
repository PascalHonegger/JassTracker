/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables;


import dev.honegger.jasstracker.data.database.Keys;
import dev.honegger.jasstracker.data.database.Public;
import dev.honegger.jasstracker.data.database.enums.ContractType;
import dev.honegger.jasstracker.data.database.tables.Round.RoundPath;
import dev.honegger.jasstracker.data.database.tables.records.ContractRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Contract extends TableImpl<ContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contract</code>
     */
    public static final Contract CONTRACT = new Contract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractRecord> getRecordType() {
        return ContractRecord.class;
    }

    /**
     * The column <code>public.contract.id</code>.
     */
    public final TableField<ContractRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.contract.name</code>.
     */
    public final TableField<ContractRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.contract.multiplier</code>.
     */
    public final TableField<ContractRecord, Integer> MULTIPLIER = createField(DSL.name("multiplier"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.contract.type</code>.
     */
    public final TableField<ContractRecord, ContractType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(ContractType.class), this, "");

    private Contract(Name alias, Table<ContractRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Contract(Name alias, Table<ContractRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(String alias) {
        this(DSL.name(alias), CONTRACT);
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(Name alias) {
        this(alias, CONTRACT);
    }

    /**
     * Create a <code>public.contract</code> table reference
     */
    public Contract() {
        this(DSL.name("contract"), null);
    }

    public <O extends Record> Contract(Table<O> path, ForeignKey<O, ContractRecord> childPath, InverseForeignKey<O, ContractRecord> parentPath) {
        super(path, childPath, parentPath, CONTRACT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ContractPath extends Contract implements Path<ContractRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ContractPath(Table<O> path, ForeignKey<O, ContractRecord> childPath, InverseForeignKey<O, ContractRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ContractPath(Name alias, Table<ContractRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ContractPath as(String alias) {
            return new ContractPath(DSL.name(alias), this);
        }

        @Override
        public ContractPath as(Name alias) {
            return new ContractPath(alias, this);
        }

        @Override
        public ContractPath as(Table<?> alias) {
            return new ContractPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContractRecord> getPrimaryKey() {
        return Keys.CONTRACT_PKEY;
    }

    private transient RoundPath _round;

    /**
     * Get the implicit to-many join path to the <code>public.round</code> table
     */
    public RoundPath round() {
        if (_round == null)
            _round = new RoundPath(this, null, Keys.ROUND__ROUND_CONTRACT_ID_FKEY.getInverseKey());

        return _round;
    }

    @Override
    public Contract as(String alias) {
        return new Contract(DSL.name(alias), this);
    }

    @Override
    public Contract as(Name alias) {
        return new Contract(alias, this);
    }

    @Override
    public Contract as(Table<?> alias) {
        return new Contract(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(String name) {
        return new Contract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(Name name) {
        return new Contract(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(Table<?> name) {
        return new Contract(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract where(Condition condition) {
        return new Contract(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contract where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contract where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contract where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Contract where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Contract whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
