/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables;


import dev.honegger.jasstracker.data.database.Keys;
import dev.honegger.jasstracker.data.database.Public;
import dev.honegger.jasstracker.data.database.enums.ContractType;
import dev.honegger.jasstracker.data.database.tables.records.ContractRecord;

import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contract extends TableImpl<ContractRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.contract</code>
     */
    public static final Contract CONTRACT = new Contract();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContractRecord> getRecordType() {
        return ContractRecord.class;
    }

    /**
     * The column <code>public.contract.id</code>.
     */
    public final TableField<ContractRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.contract.name</code>.
     */
    public final TableField<ContractRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.contract.multiplier</code>.
     */
    public final TableField<ContractRecord, Integer> MULTIPLIER = createField(DSL.name("multiplier"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.contract.type</code>.
     */
    public final TableField<ContractRecord, ContractType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(dev.honegger.jasstracker.data.database.enums.ContractType.class), this, "");

    private Contract(Name alias, Table<ContractRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contract(Name alias, Table<ContractRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(String alias) {
        this(DSL.name(alias), CONTRACT);
    }

    /**
     * Create an aliased <code>public.contract</code> table reference
     */
    public Contract(Name alias) {
        this(alias, CONTRACT);
    }

    /**
     * Create a <code>public.contract</code> table reference
     */
    public Contract() {
        this(DSL.name("contract"), null);
    }

    public <O extends Record> Contract(Table<O> child, ForeignKey<O, ContractRecord> key) {
        super(child, key, CONTRACT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ContractRecord> getPrimaryKey() {
        return Keys.CONTRACT_PKEY;
    }

    @Override
    public Contract as(String alias) {
        return new Contract(DSL.name(alias), this);
    }

    @Override
    public Contract as(Name alias) {
        return new Contract(alias, this);
    }

    @Override
    public Contract as(Table<?> alias) {
        return new Contract(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(String name) {
        return new Contract(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(Name name) {
        return new Contract(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contract rename(Table<?> name) {
        return new Contract(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Integer, ContractType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super Integer, ? super ContractType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super Integer, ? super ContractType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
