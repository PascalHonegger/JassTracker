/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables.records;


import dev.honegger.jasstracker.data.database.enums.ContractType;
import dev.honegger.jasstracker.data.database.tables.Contract;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContractRecord extends UpdatableRecordImpl<ContractRecord> implements Record4<UUID, String, Integer, ContractType> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.contract.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.contract.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.contract.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.contract.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.contract.multiplier</code>.
     */
    public void setMultiplier(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.contract.multiplier</code>.
     */
    public Integer getMultiplier() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>public.contract.type</code>.
     */
    public void setType(ContractType value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.contract.type</code>.
     */
    public ContractType getType() {
        return (ContractType) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, Integer, ContractType> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, Integer, ContractType> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Contract.CONTRACT.ID;
    }

    @Override
    public Field<String> field2() {
        return Contract.CONTRACT.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Contract.CONTRACT.MULTIPLIER;
    }

    @Override
    public Field<ContractType> field4() {
        return Contract.CONTRACT.TYPE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getMultiplier();
    }

    @Override
    public ContractType component4() {
        return getType();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getMultiplier();
    }

    @Override
    public ContractType value4() {
        return getType();
    }

    @Override
    public ContractRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ContractRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ContractRecord value3(Integer value) {
        setMultiplier(value);
        return this;
    }

    @Override
    public ContractRecord value4(ContractType value) {
        setType(value);
        return this;
    }

    @Override
    public ContractRecord values(UUID value1, String value2, Integer value3, ContractType value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ContractRecord
     */
    public ContractRecord() {
        super(Contract.CONTRACT);
    }

    /**
     * Create a detached, initialised ContractRecord
     */
    public ContractRecord(UUID id, String name, Integer multiplier, ContractType type) {
        super(Contract.CONTRACT);

        setId(id);
        setName(name);
        setMultiplier(multiplier);
        setType(type);
        resetChangedOnNotNull();
    }
}
