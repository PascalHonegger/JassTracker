/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables;


import dev.honegger.jasstracker.data.database.Keys;
import dev.honegger.jasstracker.data.database.Public;
import dev.honegger.jasstracker.data.database.tables.Contract.ContractPath;
import dev.honegger.jasstracker.data.database.tables.GameParticipation.GameParticipationPath;
import dev.honegger.jasstracker.data.database.tables.records.RoundRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Round extends TableImpl<RoundRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.round</code>
     */
    public static final Round ROUND = new Round();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundRecord> getRecordType() {
        return RoundRecord.class;
    }

    /**
     * The column <code>public.round.id</code>.
     */
    public final TableField<RoundRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.round.number</code>.
     */
    public final TableField<RoundRecord, Integer> NUMBER = createField(DSL.name("number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.round.score</code>.
     */
    public final TableField<RoundRecord, Integer> SCORE = createField(DSL.name("score"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.round.game_id</code>.
     */
    public final TableField<RoundRecord, UUID> GAME_ID = createField(DSL.name("game_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.round.player_id</code>.
     */
    public final TableField<RoundRecord, UUID> PLAYER_ID = createField(DSL.name("player_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.round.contract_id</code>.
     */
    public final TableField<RoundRecord, UUID> CONTRACT_ID = createField(DSL.name("contract_id"), SQLDataType.UUID.nullable(false), this, "");

    private Round(Name alias, Table<RoundRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Round(Name alias, Table<RoundRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.round</code> table reference
     */
    public Round(String alias) {
        this(DSL.name(alias), ROUND);
    }

    /**
     * Create an aliased <code>public.round</code> table reference
     */
    public Round(Name alias) {
        this(alias, ROUND);
    }

    /**
     * Create a <code>public.round</code> table reference
     */
    public Round() {
        this(DSL.name("round"), null);
    }

    public <O extends Record> Round(Table<O> path, ForeignKey<O, RoundRecord> childPath, InverseForeignKey<O, RoundRecord> parentPath) {
        super(path, childPath, parentPath, ROUND);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RoundPath extends Round implements Path<RoundRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RoundPath(Table<O> path, ForeignKey<O, RoundRecord> childPath, InverseForeignKey<O, RoundRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RoundPath(Name alias, Table<RoundRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RoundPath as(String alias) {
            return new RoundPath(DSL.name(alias), this);
        }

        @Override
        public RoundPath as(Name alias) {
            return new RoundPath(alias, this);
        }

        @Override
        public RoundPath as(Table<?> alias) {
            return new RoundPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<RoundRecord> getPrimaryKey() {
        return Keys.ROUND_PKEY;
    }

    @Override
    public List<ForeignKey<RoundRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ROUND__ROUND_CONTRACT_ID_FKEY, Keys.ROUND__ROUND_GAME_ID_PLAYER_ID_FKEY);
    }

    private transient ContractPath _contract;

    /**
     * Get the implicit join path to the <code>public.contract</code> table.
     */
    public ContractPath contract() {
        if (_contract == null)
            _contract = new ContractPath(this, Keys.ROUND__ROUND_CONTRACT_ID_FKEY, null);

        return _contract;
    }

    private transient GameParticipationPath _gameParticipation;

    /**
     * Get the implicit join path to the <code>public.game_participation</code>
     * table.
     */
    public GameParticipationPath gameParticipation() {
        if (_gameParticipation == null)
            _gameParticipation = new GameParticipationPath(this, Keys.ROUND__ROUND_GAME_ID_PLAYER_ID_FKEY, null);

        return _gameParticipation;
    }

    @Override
    public Round as(String alias) {
        return new Round(DSL.name(alias), this);
    }

    @Override
    public Round as(Name alias) {
        return new Round(alias, this);
    }

    @Override
    public Round as(Table<?> alias) {
        return new Round(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(String name) {
        return new Round(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(Name name) {
        return new Round(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Round rename(Table<?> name) {
        return new Round(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round where(Condition condition) {
        return new Round(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Round where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Round where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Round where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Round where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Round whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
