/*
 * This file is generated by jOOQ.
 */
package dev.honegger.jasstracker.data.database.tables;


import dev.honegger.jasstracker.data.database.Keys;
import dev.honegger.jasstracker.data.database.Public;
import dev.honegger.jasstracker.data.database.tables.Game.GamePath;
import dev.honegger.jasstracker.data.database.tables.Player.PlayerPath;
import dev.honegger.jasstracker.data.database.tables.records.TableRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Table extends TableImpl<TableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.table</code>
     */
    public static final Table TABLE = new Table();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TableRecord> getRecordType() {
        return TableRecord.class;
    }

    /**
     * The column <code>public.table.id</code>.
     */
    public final TableField<TableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.table.name</code>.
     */
    public final TableField<TableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.table.owner_id</code>.
     */
    public final TableField<TableRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "");

    private Table(Name alias, org.jooq.Table<TableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Table(Name alias, org.jooq.Table<TableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.table</code> table reference
     */
    public Table(String alias) {
        this(DSL.name(alias), TABLE);
    }

    /**
     * Create an aliased <code>public.table</code> table reference
     */
    public Table(Name alias) {
        this(alias, TABLE);
    }

    /**
     * Create a <code>public.table</code> table reference
     */
    public Table() {
        this(DSL.name("table"), null);
    }

    public <O extends Record> Table(org.jooq.Table<O> path, ForeignKey<O, TableRecord> childPath, InverseForeignKey<O, TableRecord> parentPath) {
        super(path, childPath, parentPath, TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TablePath extends Table implements Path<TableRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TablePath(org.jooq.Table<O> path, ForeignKey<O, TableRecord> childPath, InverseForeignKey<O, TableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TablePath(Name alias, org.jooq.Table<TableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TablePath as(String alias) {
            return new TablePath(DSL.name(alias), this);
        }

        @Override
        public TablePath as(Name alias) {
            return new TablePath(alias, this);
        }

        @Override
        public TablePath as(org.jooq.Table<?> alias) {
            return new TablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<TableRecord> getPrimaryKey() {
        return Keys.TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<TableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TABLE__TABLE_OWNER_ID_FKEY);
    }

    private transient PlayerPath _player;

    /**
     * Get the implicit join path to the <code>public.player</code> table.
     */
    public PlayerPath player() {
        if (_player == null)
            _player = new PlayerPath(this, Keys.TABLE__TABLE_OWNER_ID_FKEY, null);

        return _player;
    }

    private transient GamePath _game;

    /**
     * Get the implicit to-many join path to the <code>public.game</code> table
     */
    public GamePath game() {
        if (_game == null)
            _game = new GamePath(this, null, Keys.GAME__GAME_TABLE_ID_FKEY.getInverseKey());

        return _game;
    }

    @Override
    public Table as(String alias) {
        return new Table(DSL.name(alias), this);
    }

    @Override
    public Table as(Name alias) {
        return new Table(alias, this);
    }

    @Override
    public Table as(org.jooq.Table<?> alias) {
        return new Table(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(String name) {
        return new Table(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(Name name) {
        return new Table(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Table rename(org.jooq.Table<?> name) {
        return new Table(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table where(Condition condition) {
        return new Table(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Table where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Table where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Table where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Table where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Table whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
